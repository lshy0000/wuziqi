时隔多年，重启象棋ai算法

本人纯自学，未受过任何专业算法训练，很多东西皆可能不入流，还请见谅

象棋算法ai分析

1，算法通识
象棋算法同其他棋类一样，主要由搜索，盘面估计，最终决策组成。
对于盘面估计，如果一个盘面估计函数能最准确的估计盘面，那么搜索不需要层数，仅仅遍历一层就可以得出结果。
对于搜索，搜索的下一层应该仅仅展开值得搜索的分支，而值得搜索的分支又是盘面估计函数分数最高的分支。
对于决策，显然训练盘面估计函数的决策应该是搜索层数最可能深的决策，而对于已经训练的模型而言，显然取盘面估计函数最高分的决策。

2，设计算法
基于以上认知，可以一开始使用简单估计函数作为对手，当盘面估计与简单估计函数对弈，每一局的结果反向传递回到盘面估计函数
直到盘面估计函数总是优于简单估计函数是，我们将对手换成函数本身。对弈过程中，总是使用分数作为权，权转为为概率，用概率代替搜索算法的决策
而其反向传导的所有盘面作为训练数据，对局结果的盘面当前分数加减1作为盘面分数。
算法按照搜索的概率直接走棋很容易出现循环走棋，而不能结束搜索导致无法训练数据，其搜索算法必须避免循环走棋，可以在概率上适当增大分数差异，提交高分被选概率。

3，模型估计
象棋盘面共90个点，每个点一共15个值（0 和 正负种类棋子），所以算法深度不应该超过90层，单层节点不应该超过2^15点，
模型90个点作为输入，只有一个输出

4，编码设计
O1：棋盘类，棋盘数据，棋盘数组正则化
O2：搜索类，权转换概率:
O3：算法模型，








































---------------------------------
旧版声明
五子棋核心算法包括：
深度搜索。当前层数5层（电脑上7层，手机cpu太慢）
Alpha-Beta剪枝。
点分启发。
估值函数优化为计算搜索的影响分。

数独核心算法：回溯法，数据结构模拟人思考
采用队列可能值等方法减少可能回溯的次数。
搜索最大节点数不超过2的7次
速度非常快，解为所有解

拼图核心算法：A*算法
f由实际代价*系数+估值距离*系数+逆序数*系数组成。
加入逆序数系数，比普通A*算法效率高出4倍。


